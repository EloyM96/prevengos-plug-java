name: CI/CD

on:
  push:
    branches:
      - main
  pull_request:

env:
  JAVA_VERSION: '17'
  CONTAINER_IMAGE_NAME: prevengos/api-rest
  E2E_BASE_URL: ${{ vars.E2E_BASE_URL || 'https://example.com' }}
  DAST_TARGET_URL: ${{ vars.DAST_TARGET_URL || 'https://example.com' }}

jobs:
  build:
    name: Compile & Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}

      - name: Configure Gradle cache
        uses: gradle/gradle-build-action@v2

      - name: Run unit tests
        run: ./gradlew clean build

  contract-tests:
    name: Contract testing
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}

      - name: Configure Gradle cache
        uses: gradle/gradle-build-action@v2

      - name: Run contract suites
        run: |
          ./gradlew :modules:shared:test --tests '*SchemaTest*'
          ./gradlew :modules:gateway:test --tests '*PactTest*'
          ./gradlew :modules:api-rest:test --tests '*Contract*'

  dependency-scan:
    name: Dependency scanning
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}

      - name: Run OWASP Dependency-Check
        uses: dependency-check/Dependency-Check_Action@v3.1.0
        with:
          project: prevengos-plug-java
          path: .
          format: 'HTML'
          args: "--failOnCVSS 7"

      - name: Upload dependency report
        uses: actions/upload-artifact@v4
        with:
          name: dependency-check-report
          path: ./reports
          if-no-files-found: ignore

  sast:
    name: SAST (SonarQube)
    needs: build
    runs-on: ubuntu-latest
    env:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: SonarQube Scan
        if: env.SONAR_TOKEN != '' && env.SONAR_HOST_URL != ''
        uses: sonarsource/sonarqube-scan-action@v1.1.0
        with:
          args: >-
            -Dsonar.projectKey=prevengos-plug-java
            -Dsonar.projectName=prevengos-plug-java

      - name: Skip SonarQube scan (secrets missing)
        if: env.SONAR_TOKEN == '' || env.SONAR_HOST_URL == ''
        run: echo "SonarQube no configurado; se omite el escaneo."

  dast:
    name: DAST (OWASP ZAP)
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - name: OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.10.0
        with:
          target: ${{ env.DAST_TARGET_URL }}
          cmd_options: '-m 5 -I'

  e2e:
    name: End-to-end tests
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Playwright dependencies
        working-directory: tests/e2e
        run: npm install

      - name: Install Playwright browsers
        working-directory: tests/e2e
        run: npx playwright install --with-deps

      - name: Run E2E suite
        env:
          E2E_BASE_URL: ${{ env.E2E_BASE_URL }}
        working-directory: tests/e2e
        run: npm test

      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: tests/e2e/playwright-report
          if-no-files-found: ignore

  docker-image:
    name: Build & Publish container image
    needs:
      - build
      - contract-tests
      - dependency-scan
      - sast
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    outputs:
      image-tag: ${{ steps.meta.outputs.image-tag }}
      image-repository: ${{ steps.meta.outputs.image-repository }}
    env:
      CONTAINER_REGISTRY: ${{ secrets.REGISTRY_URL }}
      CONTAINER_IMAGE_NAME: ${{ env.CONTAINER_IMAGE_NAME }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}

      - name: Configure Gradle cache
        uses: gradle/gradle-build-action@v2

      - name: Prepare image metadata
        id: meta
        env:
          REGISTRY: ${{ env.CONTAINER_REGISTRY }}
          IMAGE_NAME: ${{ env.CONTAINER_IMAGE_NAME }}
        run: |
          SHORT_SHA="${GITHUB_SHA::7}"
          echo "image-tag=$SHORT_SHA" >> "$GITHUB_OUTPUT"
          echo "image-repository=$REGISTRY/$IMAGE_NAME" >> "$GITHUB_OUTPUT"

      - name: Login to container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.CONTAINER_REGISTRY }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Publish image with Jib
        env:
          JIB_USERNAME: ${{ secrets.REGISTRY_USERNAME }}
          JIB_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}
        run: |
          ./gradlew :modules:api-rest:jib \
            -PcontainerRegistry=${{ env.CONTAINER_REGISTRY }} \
            -PcontainerImageName=${{ env.CONTAINER_IMAGE_NAME }} \
            -PcontainerImageTag=${{ steps.meta.outputs.image-tag }} \
            -Djib.to.auth.username=${JIB_USERNAME} \
            -Djib.to.auth.password=${JIB_PASSWORD}

  run-migrations:
    name: Run database migrations
    needs: docker-image
    runs-on: ubuntu-latest
    if: needs.docker-image.result == 'success' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run Flyway migrations
        env:
          FLYWAY_URL: ${{ secrets.DATABASE_URL }}
          FLYWAY_USER: ${{ secrets.DATABASE_USER }}
          FLYWAY_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
        run: |
          docker run --rm \
            -v "${{ github.workspace }}/migrations/postgresql:/flyway/sql" \
            -e FLYWAY_URL="$FLYWAY_URL" \
            -e FLYWAY_USER="$FLYWAY_USER" \
            -e FLYWAY_PASSWORD="$FLYWAY_PASSWORD" \
            -e FLYWAY_SCHEMAS=public \
            flyway/flyway:9.22.3 migrate

  deploy-staging:
    name: Deploy to staging
    needs: run-migrations
    runs-on: ubuntu-latest
    if: needs.run-migrations.result == 'success'
    env:
      KUBE_NAMESPACE: staging
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: v1.29.0

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.13.3

      - name: Configure kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBE_CONFIG }}" | base64 --decode > ~/.kube/config

      - name: Ensure namespace exists
        run: |
          kubectl create namespace "$KUBE_NAMESPACE" --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy API chart
        env:
          IMAGE_REPOSITORY: ${{ needs.docker-image.outputs.image-repository }}
          IMAGE_TAG: ${{ needs.docker-image.outputs.image-tag }}
        run: |
          helm upgrade --install plug-api docs/infra/chart \
            --namespace "$KUBE_NAMESPACE" \
            --set image.repository="$IMAGE_REPOSITORY" \
            --set image.tag="$IMAGE_TAG" \
            --set ingress.enabled=true
